#!/usr/bin/env tclsh

# Some useful tcl commands that can be used by all modules

proc epccPrgEnvCompilerEnv {} {

  # Return current compiler environment - one of: CRAY CRAYCLANG GNU AOCC

  set compiler "GNU" ; # Default if no PE_ENV

  if { [ info exists ::env(PE_ENV) ] } {

    set compiler $::env(PE_ENV) ; # ... although CRAY is a special case ...

    if { $compiler == "CRAY" } {
      if { [ info exists ::env(CRAY_PE_USE_CLANG) ] } {
       	set compiler "CRAYCLANG"
      }
    }
  }

  return $compiler
}


proc epccPrgEnvCompilerVersion { compiler_env } {

  # Return major.minor version for given compiler environment
  # for currently loaded version

  set compilerVersion ""

  if { [ info exists compiler_env ] } {

    if { $compiler_env == "GNU" } {
      if { [ info exists ::env(GNU_VERSION) ] } {
        set compilerVersion $::env(GNU_VERSION)
      }
    } elseif { $compiler_env == "CRAY" || $compiler_env == "CRAYCLANG" } {
      if { [ info exists ::env(CRAY_CC_VERSION) ] } {
        set compilerVersion $::env(CRAY_CC_VERSION)
      }
    } elseif { $compiler_env == "AOCC" } {
      if { [ info exists ::env(CRAY_AOCC_VERSION) ] } {
        set compilerVersion $::env(CRAY_AOCC_VERSION)
      }
    }

    # major.minor
    set compilerVersion [ join [ lrange [ split $compilerVersion . ] 0 1 ] . ]
  }

  return $compilerVersion
}


proc epccProductAvailableVersions { prod_root prgenv } {

  # Return a list of major.minor versions available in $prod_root/$prgenv
  # e.g., "9.3 10.1"

  # Care
  # The search will detect any file matching *.*
  # This may not be what we are expecting.

  set versions ""

  if { [ info exists prod_root ] && [ info exists prgenv ] } {
    set dir $prod_root/$prgenv
    if { [ file exists $dir ] } {
       set all_dirs [ lsort -decreasing [ glob -tails -directory $dir * ] ]
       set versions [ lsearch -glob -inline -all [ set all_dirs ] *.* ]
     }
  } 

  return $versions
}
